---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
// import UnifiedKnowledgeGraph from "@/components/UnifiedKnowledgeGraph.astro";
// import { buildUnifiedGraph, getGraphStats, getBridgeConnections } from "@/utils/unifiedGraph";

// Build the unified graph with both posts and concepts
// const graph = await buildUnifiedGraph();
// const stats = await getGraphStats();

// Temporary placeholder data
const stats = { totalNodes: 0, totalEdges: 0, posts: 0, concepts: 0, bridges: 0, categories: {} };
const mostConnected = [];
const isolatedNodes = [];
const categories = [];
const totalPosts = 0;
---

<Layout title="Knowledge Graph" description="Interactive visualization of blog post connections and relationships">
  <Header />
  <main id="main-content">
    <article class="pt-6 md:pt-12">
      <div class="mx-auto max-w-4xl px-6">
        <header class="mb-8">
          <h1 class="text-3xl font-bold text-foreground mb-4">
            Unified Knowledge Graph
          </h1>
          <p class="text-lg text-muted-foreground mb-6">
            Explore the connections between blog posts and concepts in this interactive knowledge map. 
            See how engineering principles bridge to product management insights.
          </p>
          
          <!-- Graph Statistics -->
          <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-8">
            <div class="p-4 bg-muted/20 rounded-lg border border-muted">
              <div class="text-2xl font-bold text-accent">{stats.totalNodes}</div>
              <div class="text-sm text-muted-foreground">Total Nodes</div>
            </div>
            <div class="p-4 bg-muted/20 rounded-lg border border-muted">
              <div class="text-2xl font-bold text-accent">{stats.posts}</div>
              <div class="text-sm text-muted-foreground">Blog Posts</div>
            </div>
            <div class="p-4 bg-muted/20 rounded-lg border border-muted">
              <div class="text-2xl font-bold text-accent">{stats.concepts}</div>
              <div class="text-sm text-muted-foreground">Concepts</div>
            </div>
            <div class="p-4 bg-muted/20 rounded-lg border border-muted">
              <div class="text-2xl font-bold text-accent">{stats.bridges}</div>
              <div class="text-sm text-muted-foreground">Bridges</div>
            </div>
            <div class="p-4 bg-muted/20 rounded-lg border border-muted">
              <div class="text-2xl font-bold text-accent">{stats.totalEdges}</div>
              <div class="text-sm text-muted-foreground">Connections</div>
            </div>
          </div>
        </header>

        <!-- Interactive Graph -->
        <div class="mb-8">
          <div class="p-8 bg-muted/20 rounded-lg border border-muted text-center">
            <h3 class="text-lg font-semibold text-accent mb-4">Knowledge Graph</h3>
            <p class="text-muted-foreground">Graph visualization coming soon!</p>
          </div>
        </div>

        <!-- Graph Analytics -->
        <div class="grid md:grid-cols-2 gap-8 mb-8">
          <!-- Most Connected Posts -->
          <div class="p-6 bg-muted/20 rounded-lg border border-muted">
            <h3 class="text-lg font-semibold text-accent mb-4">
              Most Connected Posts
            </h3>
            <div class="space-y-3">
              {mostConnected.map((node) => (
                <div class="flex items-center justify-between p-3 bg-background rounded border border-muted">
                  <div class="flex-1">
                    <a 
                      href={node.url}
                      class="font-medium text-foreground hover:text-accent"
                    >
                      {node.label}
                    </a>
                    <div class="text-sm text-muted-foreground">
                      {node.category && (
                        <span class="capitalize">{node.category}</span>
                      )}
                      <span class="ml-2 text-xs bg-muted px-2 py-1 rounded">
                        {node.type}
                      </span>
                    </div>
                  </div>
                  <div class="text-sm font-medium text-accent">
                    {node.connectionCount} links
                  </div>
                </div>
              ))}
            </div>
          </div>

          <!-- Category Distribution -->
          <div class="p-6 bg-muted/20 rounded-lg border border-muted">
            <h3 class="text-lg font-semibold text-accent mb-4">
              Category Distribution
            </h3>
            <div class="space-y-3">
              {categories.map(category => {
                const count = graph.nodes.filter(n => n.category === category).length;
                const percentage = totalPosts > 0 ? (count / totalPosts) * 100 : 0;
                return (
                  <div class="flex items-center justify-between">
                    <span class="capitalize text-foreground">{category}</span>
                    <div class="flex items-center gap-2">
                      <div class="w-24 bg-muted rounded-full h-2">
                        <div 
                          class="bg-accent h-2 rounded-full" 
                          style={`width: ${percentage}%`}
                        ></div>
                      </div>
                      <span class="text-sm text-muted-foreground w-8">{count}</span>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        <!-- Isolated Nodes (if any) -->
        {isolatedNodes.length > 0 && (
          <div class="p-6 bg-muted/20 rounded-lg border border-muted mb-8">
            <h3 class="text-lg font-semibold text-accent mb-4">
              Isolated Content
            </h3>
            <p class="text-sm text-muted-foreground mb-4">
              These items don't have any connections yet. Consider adding links to related content.
            </p>
            <div class="grid gap-2">
              {isolatedNodes.map(node => (
                <a 
                  href={node.url}
                  class="p-3 bg-background rounded border border-muted hover:border-accent hover:bg-accent/5 transition-colors"
                >
                  <div class="font-medium text-foreground">{node.label}</div>
                  <div class="text-sm text-muted-foreground">
                    {node.category && (
                      <span class="capitalize">{node.category}</span>
                    )}
                    <span class="ml-2 text-xs bg-muted px-2 py-1 rounded">
                      {node.type}
                    </span>
                  </div>
                </a>
              ))}
            </div>
          </div>
        )}

        <!-- Usage Instructions -->
        <div class="p-6 bg-muted/20 rounded-lg border border-muted">
          <h3 class="text-lg font-semibold text-accent mb-4">
            How to Use the Knowledge Graph
          </h3>
          <div class="grid md:grid-cols-2 gap-6 text-sm">
            <div>
              <h4 class="font-medium text-foreground mb-2">Navigation</h4>
              <ul class="space-y-1 text-muted-foreground">
                <li>• Click and drag nodes to move them around</li>
                <li>• Click on a node to navigate to that post</li>
                <li>• Use mouse wheel to zoom in/out</li>
                <li>• Drag the background to pan around</li>
              </ul>
            </div>
            <div>
              <h4 class="font-medium text-foreground mb-2">Filtering</h4>
              <ul class="space-y-1 text-muted-foreground">
                <li>• Use category filter to show specific topics</li>
                <li>• Search by post title or tags</li>
                <li>• Toggle cluster view to group by category</li>
                <li>• Reset layout to reorganize the graph</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </article>
  </main>
  <Footer />
</Layout>

---
import { SITE } from "@/config";

export interface Props {
  title?: string;
  description?: string;
  publishDate?: Date;
  tags?: string[];
  type?: string;
  ogImage?: string;
  canonicalURL?: string | URL;
  pubDatetime?: Date;
  modDatetime?: Date | null;
}

const {
  title = SITE.title,
  description = SITE.desc,
  publishDate,
  tags = [],
  type = "article",
  ogImage = SITE.ogImage ? `/${SITE.ogImage}` : "/og.png",
  canonicalURL = new URL(Astro.url.pathname, Astro.url),
  pubDatetime,
  modDatetime,
} = Astro.props as Props;

const socialImageURL = new URL(ogImage, Astro.url);
const publishDateISO = (publishDate || pubDatetime)?.toISOString();

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: title,
  description: description,
  author: {
    "@type": "Person",
    name: "Lucas Cazelli",
    url: "https://lucascazelli.com",
    jobTitle: "CPO & Co-founder",
    worksFor: {
      "@type": "Organization",
      name: "North AI"
    }
  },
  datePublished: publishDateISO,
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  keywords: tags.join(', '),
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": canonicalURL
  }
};
---

<>
  <title>{title}</title>
  <meta name="title" content={title} />
  <meta name="description" content={description} />

  <!-- AI Crawling Optimization -->
  <meta name="robots" content="index, follow, max-image-preview:large" />
  <link rel="canonical" href={canonicalURL} />

  <!-- Schema.org for AI Understanding -->
  <script type="application/ld+json" is:inline set:html={JSON.stringify(structuredData)} />

  <!-- OpenGraph for Social -->
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:type" content={type} />
  <meta property="og:url" content={canonicalURL} />
  <meta property="og:image" content={socialImageURL} />
  <meta property="article:author" content="Lucas Cazelli" />
  {publishDateISO && (
    <meta property="article:published_time" content={publishDateISO} />
  )}
  {modDatetime && (
    <meta property="article:modified_time" content={modDatetime.toISOString()} />
  )}

  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={canonicalURL} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={socialImageURL} />
</>



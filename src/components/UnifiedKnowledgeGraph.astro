---
export interface Props {
  nodes: Array<{
    id: string;
    label: string;
    type: 'post' | 'concept';
    category?: string;
    weight: number;
    url: string;
    date?: Date;
    definition?: string;
    importance?: number;
    cluster?: string;
  }>;
  edges: Array<{
    source: string;
    target: string;
    type: 'references' | 'related' | 'bridges' | 'mentions' | 'connections';
    weight: number;
  }>;
  width?: number;
  height?: number;
}

const { nodes, edges, width = 1000, height = 700 } = Astro.props;
---

<div class="unified-graph-container">
  <div class="graph-controls">
    <div class="control-group">
      <label for="node-filter">Filter by type:</label>
      <select id="node-filter" class="filter-select">
        <option value="all">All Nodes</option>
        <option value="post">Blog Posts</option>
        <option value="concept">Concepts</option>
      </select>
    </div>
    
    <div class="control-group">
      <label for="edge-filter">Show connections:</label>
      <select id="edge-filter" class="filter-select">
        <option value="all">All Connections</option>
        <option value="bridges">Bridges Only</option>
        <option value="related">Related Only</option>
        <option value="mentions">Mentions Only</option>
      </select>
    </div>
    
    <div class="control-group">
      <button id="reset-layout" class="control-btn">Reset Layout</button>
      <button id="center-graph" class="control-btn">Center View</button>
    </div>
  </div>
  
  <div class="graph-legend">
    <div class="legend-item">
      <div class="legend-node post-node"></div>
      <span>Blog Posts</span>
    </div>
    <div class="legend-item">
      <div class="legend-node concept-node"></div>
      <span>Concepts</span>
    </div>
    <div class="legend-item">
      <div class="legend-edge bridge-edge"></div>
      <span>Bridges (Engineering ↔ Product)</span>
    </div>
    <div class="legend-item">
      <div class="legend-edge related-edge"></div>
      <span>Related Concepts</span>
    </div>
    <div class="legend-item">
      <div class="legend-edge mention-edge"></div>
      <span>Post Mentions</span>
    </div>
  </div>
  
  <div id="graph-canvas" class="graph-canvas"></div>
  
  <div id="node-details" class="node-details hidden">
    <div class="details-content">
      <h4 id="details-title"></h4>
      <p id="details-description"></p>
      <div id="details-meta"></div>
      <a id="details-link" href="#" class="details-link">Visit Page →</a>
    </div>
  </div>
</div>

<script define:vars={{ nodes, edges, width, height }}>
// Simple graph visualization without D3.js for now

// Simple placeholder for now - will implement full D3.js visualization later
function initGraph() {
  const canvas = document.getElementById('graph-canvas');
  if (canvas) {
    canvas.innerHTML = `
      <div style="display: flex; align-items: center; justify-content: center; height: 400px; background: #f8f9fa; border-radius: 8px; border: 2px dashed #ddd;">
        <div style="text-align: center; color: #666;">
          <h3>Knowledge Graph Visualization</h3>
          <p>Interactive D3.js graph coming soon!</p>
          <p>Nodes: ${nodes.length} | Edges: ${edges.length}</p>
        </div>
      </div>
    `;
  }
}

function applyFilters() {
  // Placeholder for filter functionality
  console.log('Filters applied');
}

function renderGraph() {
  // Placeholder for graph rendering
  console.log('Graph rendered');
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
  initGraph();
  
  // Filter controls
  document.getElementById('node-filter')?.addEventListener('change', applyFilters);
  document.getElementById('edge-filter')?.addEventListener('change', applyFilters);
  
  // Control buttons
  document.getElementById('reset-layout')?.addEventListener('click', () => {
    simulation.alpha(0.3).restart();
  });
  
  document.getElementById('center-graph')?.addEventListener('click', () => {
    const bounds = g.node().getBBox();
    const fullWidth = config.width;
    const fullHeight = config.height;
    const widthScale = fullWidth / bounds.width;
    const heightScale = fullHeight / bounds.height;
    const scale = Math.min(widthScale, heightScale) * 0.8;
    
    const translate = [
      fullWidth / 2 - scale * (bounds.x + bounds.width / 2),
      fullHeight / 2 - scale * (bounds.y + bounds.height / 2)
    ];
    
    svg.transition().duration(750).call(
      d3.zoom().transform,
      d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale)
    );
  });
});
</script>

<style>
.unified-graph-container {
  background: white;
  border-radius: 12px;
  border: 1px solid #e5e5e5;
  overflow: hidden;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.graph-controls {
  display: flex;
  gap: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-bottom: 1px solid #e5e5e5;
  flex-wrap: wrap;
  align-items: center;
}

.control-group {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.control-group label {
  font-size: 0.9rem;
  font-weight: 500;
  color: #666;
}

.filter-select {
  padding: 0.25rem 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.9rem;
  background: white;
}

.control-btn {
  padding: 0.5rem 1rem;
  background: #4A6741;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: background 0.2s;
}

.control-btn:hover {
  background: #2d4a2d;
}

.graph-legend {
  display: flex;
  gap: 1.5rem;
  padding: 0.75rem 1rem;
  background: #f8f9fa;
  border-bottom: 1px solid #e5e5e5;
  flex-wrap: wrap;
  font-size: 0.85rem;
}

.legend-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #666;
}

.legend-node {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

.post-node {
  background: #4A6741;
}

.concept-node {
  background: #7CB342;
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
}

.legend-edge {
  width: 20px;
  height: 2px;
  background: #999;
}

.bridge-edge {
  background: #FF6B6B;
}

.related-edge {
  background: #999;
  background-image: repeating-linear-gradient(
    90deg,
    #999 0,
    #999 3px,
    transparent 3px,
    transparent 6px
  );
}

.mention-edge {
  background: #DDD;
  background-image: repeating-linear-gradient(
    90deg,
    #DDD 0,
    #DDD 1px,
    transparent 1px,
    transparent 2px
  );
}

.graph-canvas {
  position: relative;
  width: 100%;
  height: 700px;
  background: #fafafa;
}

.graph-svg {
  width: 100%;
  height: 100%;
}

.node-details {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: white;
  border: 1px solid #e5e5e5;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 300px;
  z-index: 10;
}

.node-details.hidden {
  display: none;
}

.details-content h4 {
  margin: 0 0 0.5rem 0;
  color: #4A6741;
  font-size: 1.1rem;
}

.details-content p {
  margin: 0 0 0.75rem 0;
  color: #666;
  font-size: 0.9rem;
  line-height: 1.4;
}

.details-meta {
  margin-bottom: 0.75rem;
}

.node-type-badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.node-type-badge.post {
  background: #e8f5e8;
  color: #4A6741;
}

.node-type-badge.concept {
  background: #f0f7f0;
  color: #7CB342;
}

.node-category, .node-date, .node-importance {
  font-size: 0.8rem;
  color: #999;
  margin-bottom: 0.25rem;
}

.details-link {
  color: #4A6741;
  text-decoration: none;
  font-weight: 500;
  font-size: 0.9rem;
}

.details-link:hover {
  text-decoration: underline;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .unified-graph-container {
    background: #1a1a1a;
    border-color: #404040;
  }
  
  .graph-controls {
    background: #2a2a2a;
    border-bottom-color: #404040;
  }
  
  .control-group label {
    color: #ccc;
  }
  
  .filter-select {
    background: #2a2a2a;
    border-color: #404040;
    color: #e0e0e0;
  }
  
  .control-btn {
    background: #7CB342;
  }
  
  .control-btn:hover {
    background: #9ccc65;
  }
  
  .graph-legend {
    background: #2a2a2a;
    border-bottom-color: #404040;
    color: #ccc;
  }
  
  .graph-canvas {
    background: #1a1a1a;
  }
  
  .node-details {
    background: #2a2a2a;
    border-color: #404040;
  }
  
  .details-content h4 {
    color: #7CB342;
  }
  
  .details-content p {
    color: #ccc;
  }
  
  .node-type-badge.post {
    background: #1a2a1a;
    color: #7CB342;
  }
  
  .node-type-badge.concept {
    background: #1a2a1a;
    color: #9ccc65;
  }
  
  .node-category, .node-date, .node-importance {
    color: #999;
  }
  
  .details-link {
    color: #7CB342;
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .graph-controls {
    flex-direction: column;
    align-items: stretch;
  }
  
  .control-group {
    justify-content: space-between;
  }
  
  .graph-legend {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .graph-canvas {
    height: 500px;
  }
  
  .node-details {
    position: relative;
    top: auto;
    right: auto;
    margin: 1rem;
    max-width: none;
  }
}
</style>

---
// ConceptModal.astro - Interactive modal for concept previews
import { getCollection } from 'astro:content';

// Get concept data at build time
const concepts = await getCollection('concepts');
const conceptData = new Map();

concepts.forEach(concept => {
  const conceptId = concept.id.replace('.md', '');
  conceptData.set(conceptId, {
    id: conceptId,
    term: concept.data.term,
    definition: concept.data.definition,
    category: concept.data.category,
    aliases: concept.data.aliases || [],
    related: concept.data.related || [],
    examples: concept.data.examples || [],
    formula: concept.data.formula,
    bridgeFrom: concept.data.bridgeFrom,
    bridgeTo: concept.data.bridgeTo,
    url: `/concepts/${conceptId}`
  });
});

const conceptDataJson = JSON.stringify(Object.fromEntries(conceptData));
---

<div id="concept-modal" class="concept-modal hidden">
  <div class="modal-backdrop" id="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="modal-title"></h3>
      <button class="modal-close" aria-label="Close" id="modal-close">×</button>
    </div>
    <div class="modal-body">
      <p id="modal-definition" class="modal-definition"></p>
      <div id="modal-details" class="modal-details"></div>
    </div>
    <div class="modal-footer">
      <div class="modal-actions">
        <a id="modal-full-link" href="#" class="full-page-link">
          Open full page →
        </a>
        <button id="modal-new-tab-btn" class="new-tab-button" title="Open in new tab">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
            <polyline points="15,3 21,3 21,9"></polyline>
            <line x1="10" y1="14" x2="21" y2="3"></line>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ conceptDataJson }}>
// Concept modal functionality
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('concept-modal');
  const backdrop = document.getElementById('modal-backdrop');
  const closeBtn = document.getElementById('modal-close');
  const modalTitle = document.getElementById('modal-title');
  const modalDefinition = document.getElementById('modal-definition');
  const modalDetails = document.getElementById('modal-details');
  const modalLink = document.getElementById('modal-full-link');
  const newTabBtn = document.getElementById('modal-new-tab-btn');
  
  // Parse concept data from server
  const conceptData = new Map(Object.entries(JSON.parse(conceptDataJson)));
  
  console.log('Loaded concept data:', conceptData);
  
  // Show modal with concept data
  function showConceptModal(conceptId) {
    const concept = conceptData.get(conceptId);
    
    if (!concept) {
      // Fallback: redirect to concept page
      window.location.href = `/concepts/${conceptId}`;
      return;
    }
    
    // Populate modal content
    modalTitle.textContent = concept.term;
    modalDefinition.textContent = concept.definition;
    
    // Build details HTML
    let detailsHTML = '';
    
    if (concept.formula) {
      detailsHTML += `
        <div class="concept-formula">
          <strong>Formula:</strong> 
          <code>${concept.formula}</code>
        </div>
      `;
    }
    
    if (concept.examples && concept.examples.length > 0) {
      detailsHTML += '<div class="concept-examples"><strong>Example:</strong>';
      concept.examples.slice(0, 2).forEach(example => {
        detailsHTML += `
          <div class="example-item">
            <span class="example-context">${example.context}:</span>
            <span class="example-description">${example.description}</span>
          </div>
        `;
      });
      detailsHTML += '</div>';
    }
    
    if (concept.related && concept.related.length > 0) {
      detailsHTML += '<div class="related-concepts"><strong>Related:</strong> ';
      detailsHTML += concept.related.slice(0, 3).map(id => 
        `<a href="/concepts/${id}" class="related-link" data-concept="${id}">${id.replace(/-/g, ' ')}</a>`
      ).join(', ');
      if (concept.related.length > 3) {
        detailsHTML += ` <span class="more-related">+${concept.related.length - 3} more</span>`;
      }
      detailsHTML += '</div>';
    }
    
    modalDetails.innerHTML = detailsHTML;
    modalLink.href = `/concepts/${conceptId}`;
    
    // Show modal
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Focus management
    closeBtn.focus();
  }
  
  // Close modal
  function closeModal() {
    modal.classList.add('hidden');
    document.body.style.overflow = '';
    // Return focus to the triggering element
    if (window.lastFocusedElement) {
      window.lastFocusedElement.focus();
    }
  }
  
  // Event listeners
  closeBtn.addEventListener('click', closeModal);
  backdrop.addEventListener('click', closeModal);
  
  // New tab button functionality
  newTabBtn.addEventListener('click', () => {
    const conceptUrl = modalLink.href;
    if (conceptUrl && conceptUrl !== '#') {
      window.open(conceptUrl, '_blank', 'noopener,noreferrer');
    }
  });
  
  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });
  
  // Handle concept link clicks
  document.addEventListener('click', (e) => {
    const conceptLink = e.target.closest('[data-concept]');
    if (conceptLink && !e.ctrlKey && !e.metaKey) {
      e.preventDefault();
      window.lastFocusedElement = e.target;
      showConceptModal(conceptLink.dataset.concept);
    }
  });
  
  // Handle related concept clicks within modal
  modalDetails.addEventListener('click', (e) => {
    const relatedLink = e.target.closest('.related-link[data-concept]');
    if (relatedLink && !e.ctrlKey && !e.metaKey) {
      e.preventDefault();
      showConceptModal(relatedLink.dataset.concept);
    }
  });
});
</script>

<style>
.concept-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
}

.concept-modal.hidden {
  display: none;
}

.modal-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.modal-content {
  position: relative;
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  animation: modalSlideIn 0.2s ease-out;
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: translateY(-20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #e5e5e5;
  background: #f8f9fa;
  border-radius: 12px 12px 0 0;
}

.modal-header h3 {
  margin: 0;
  color: #4A6741;
  font-size: 1.5rem;
  font-weight: 600;
}

.modal-close {
  background: none;
  border: none;
  font-size: 2rem;
  cursor: pointer;
  color: #999;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.2s ease;
  line-height: 1;
}

.modal-close:hover {
  background: #f0f0f0;
  color: #666;
}

.modal-close:focus {
  outline: 2px solid #4A6741;
  outline-offset: 2px;
}

.modal-body {
  padding: 1.5rem;
}

.modal-definition {
  font-size: 1.1rem;
  line-height: 1.6;
  color: #333;
  margin-bottom: 1.5rem;
  font-weight: 500;
}

.modal-details {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.concept-formula {
  background: #f8f8f8;
  padding: 1rem;
  border-radius: 6px;
  border-left: 3px solid #4A6741;
}

.concept-formula strong {
  color: #4A6741;
  display: block;
  margin-bottom: 0.5rem;
}

.concept-formula code {
  font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
  color: #4A6741;
  font-size: 0.9rem;
  background: white;
  padding: 0.25rem 0.5rem;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
}

.concept-examples {
  background: #f0f7f0;
  padding: 1rem;
  border-radius: 6px;
  border-left: 3px solid #4A6741;
}

.concept-examples strong {
  color: #4A6741;
  display: block;
  margin-bottom: 0.75rem;
}

.example-item {
  margin-bottom: 0.75rem;
  padding: 0.5rem;
  background: white;
  border-radius: 4px;
  border: 1px solid #e0e0e0;
}

.example-item:last-child {
  margin-bottom: 0;
}

.example-context {
  font-weight: 600;
  color: #4A6741;
  display: block;
  margin-bottom: 0.25rem;
}

.example-description {
  color: #666;
  line-height: 1.4;
}

.related-concepts {
  background: #fff8e1;
  padding: 1rem;
  border-radius: 6px;
  border-left: 3px solid #ff9800;
}

.related-concepts strong {
  color: #4A6741;
  display: block;
  margin-bottom: 0.75rem;
}

.related-link {
  color: #4A6741;
  text-decoration: none;
  border-bottom: 1px dotted #4A6741;
  margin-right: 0.5rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

.related-link:hover {
  border-bottom-style: solid;
  color: #2d4a2d;
}

.more-related {
  color: #999;
  font-size: 0.9rem;
  font-style: italic;
}

.modal-footer {
  padding: 1rem 1.5rem;
  background: #f8f9fa;
  border-top: 1px solid #e5e5e5;
  border-radius: 0 0 12px 12px;
  display: flex;
  justify-content: flex-end;
}

.modal-actions {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.full-page-link {
  color: #4A6741;
  text-decoration: none;
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border: 1px solid #4A6741;
  border-radius: 6px;
  transition: all 0.2s ease;
}

.full-page-link:hover {
  background: #4A6741;
  color: white;
  text-decoration: none;
}

.new-tab-button {
  background: none;
  border: 1px solid #4A6741;
  border-radius: 6px;
  color: #4A6741;
  cursor: pointer;
  padding: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  width: 40px;
  height: 40px;
}

.new-tab-button:hover {
  background: #4A6741;
  color: white;
}

.new-tab-button:focus {
  outline: 2px solid #4A6741;
  outline-offset: 2px;
}

.new-tab-button svg {
  width: 16px;
  height: 16px;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .modal-content {
    width: 95%;
    margin: 1rem;
  }
  
  .modal-header {
    padding: 1rem;
  }
  
  .modal-header h3 {
    font-size: 1.25rem;
  }
  
  .modal-body {
    padding: 1rem;
  }
  
  .modal-footer {
    padding: 1rem;
  }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .modal-content {
    background: #1a1a1a;
    color: #e0e0e0;
  }
  
  .modal-header {
    background: #2a2a2a;
    border-bottom-color: #404040;
  }
  
  .modal-header h3 {
    color: #7CB342;
  }
  
  .modal-close {
    color: #ccc;
  }
  
  .modal-close:hover {
    background: #404040;
    color: #e0e0e0;
  }
  
  .modal-definition {
    color: #e0e0e0;
  }
  
  .concept-formula {
    background: #2a2a2a;
    border-left-color: #7CB342;
  }
  
  .concept-formula code {
    background: #1a1a1a;
    border-color: #404040;
    color: #7CB342;
  }
  
  .concept-examples {
    background: #1a2a1a;
    border-left-color: #7CB342;
  }
  
  .example-item {
    background: #2a2a2a;
    border-color: #404040;
  }
  
  .example-context {
    color: #7CB342;
  }
  
  .example-description {
    color: #ccc;
  }
  
  .related-concepts {
    background: #2a2515;
    border-left-color: #ff9800;
  }
  
  .related-concepts strong {
    color: #7CB342;
  }
  
  .related-link {
    color: #7CB342;
    border-bottom-color: #7CB342;
  }
  
  .related-link:hover {
    color: #9ccc65;
  }
  
  .modal-footer {
    background: #2a2a2a;
    border-top-color: #404040;
  }
  
  .full-page-link {
    color: #7CB342;
    border-color: #7CB342;
  }
  
  .full-page-link:hover {
    background: #7CB342;
    color: #1a1a1a;
  }
  
  .new-tab-button {
    border-color: #7CB342;
    color: #7CB342;
  }
  
  .new-tab-button:hover {
    background: #7CB342;
    color: #1a1a1a;
  }
  
  .new-tab-button:focus {
    outline-color: #7CB342;
  }
}
</style>
